name: Release

on:
  milestone:
    types: [ closed ]

jobs:
  get-version-info:
    if: github.event.milestone
    name: Gathering version information
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Setup GIT versioning
      id: version
      uses: dotnet/nbgv@v0.4.0
      with:
        setAllVars: true

    - name: Build Changelog
      uses: parithon/release-changelog-builder-action@v2.7.1
      id: build_changelog
      env:
        GITHUB_TOKEN: ${{ github.token }}

    outputs:
      CloudBuildVersion: ${{ steps.version.outputs.CloudBuildVersion }}
      MajorMinorVersion: ${{ steps.version.outputs.MajorMinorVersion }}
      SimpleVersion: ${{ steps.version.outputs.SimpleVersion }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}

  prepare-release:
    needs: [ get-version-info ]
    if: github.event.milestone && github.event.milestone.title == 'v${{ needs.get-version-info.outputs.MajorMinorVersion }}'
    name: Prepare new release
    runs-on: ubuntu-latest
    environment:
      name: release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_GITHUB }}
        fetch-depth: 0
    
    - name: Import GPG key
      id: import_gpg
      uses: parithon/ghaction-import-gpg@v3
      with:
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
    
    - name: Setup CI GIT
      run: |
        git config user.name "${{ steps.import_gpg.outputs.name }}"
        git config user.email "${{ steps.import_gpg.outputs.email }}"
        git config --global user.signingKey ${{ steps.import_gpg.outputs.keyid }}
        git config --global commit.gpgsign true
    
    - name: Setup GIT versioning
      id: version
      uses: dotnet/nbgv@v0.4.0
      with:
        setAllVars: true
    
    - name: Increment version.json on main + create release branch
      id: versions
      run: |
        nbgv prepare-release
        
    - name: Sign commits on main and release branch
      run: |
        git checkout v$NBGV_MajorMinorVersion
        git commit --amend -CHEAD
        git checkout main
        git reset --hard HEAD~1
        git commit --amend -CHEAD
        git merge -S -X ours v$NBGV_MajorMinorVersion
    
    - name: Push version.json updates to main
      run: git push origin main

    - name: Push release branch to origin
      run: git push origin v$NBGV_MajorMinorVersion      
  
  build:
    name: Build + Package artifacts
    needs: [ get-version-info, prepare-release ]
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ matrix.branch }}
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Setup GIT versioning
      id: version
      uses: dotnet/nbgv@v0.4.0
      with:
        setAllVars: true

    - name: Build projects
      run: |
        dotnet build ./Parithon.StreamDeck.SDK.MSBuild.Tool --configuration Release --nologo
        dotnet build ./Parithon.StreamDeck.SDK.MSBuild --configuration Release --nologo
        dotnet build ./Parithon.StreamDeck.SDK --configuration Release --nologo

        dotnet build ./Parithon.StreamDeck.SDK.MSBuild.Tool --configuration Release --nologo --runtime osx-x64 --no-self-contained
        dotnet build ./Parithon.StreamDeck.SDK.MSBuild --configuration Release --nologo --runtime osx-x64 --no-self-contained
        dotnet build ./Parithon.StreamDeck.SDK --configuration Release --nologo --runtime osx-x64 --no-self-contained

        dotnet build ./Parithon.StreamDeck.SDK.MSBuild.Tool --configuration Release --nologo --runtime win10-x86 --no-self-contained
        dotnet build ./Parithon.StreamDeck.SDK.MSBuild --configuration Release --nologo --runtime win10-x86 --no-self-contained
        dotnet build ./Parithon.StreamDeck.SDK --configuration Release --nologo --runtime win10-x86 --no-self-contained

    - name: Package NuGet artifacts
      run: |
        dotnet pack ./Parithon.StreamDeck.SDK.MSBuild --no-restore --no-build --nologo --configuration Release
        dotnet pack ./Parithon.StreamDeck.SDK --no-restore --no-build --nologo --configuration Release

    - name: Upload MSBUILD artifact
      uses: actions/upload-artifact@v2
      with:
        name: nupkgs-${{ matrix.branch }}
        path: "./nupkgs/Parithon.StreamDeck.SDK.MSBuild.${{ env.NBGV_CloudBuildNumber }}.nupkg"

    - name: Upload SDK artifact
      uses: actions/upload-artifact@v2
      with:
        name: nupkgs-${{ matrix.branch }}
        path: "./nupkgs/Parithon.StreamDeck.SDK.${{ env.NBGV_CloudBuildNumber }}.nupkg"

  create-releases:
    name: Create Github Releases
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: nupkgs-main

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: nupkgs-v${{ needs.get-version-info.outputs.SimpleVersion }}

    - name: Create Github Pre-Release
      uses: actions/create-release@v1
      id: create_preview_release
      with:
        draft: false
        prerelease: true
        release_name: v${{ needs.get-version-info.outputs.CloudBuildVersion }}
        tag_name: v${{ needs.get-version-info.outputs.CloudBuildVersion }}
        body: ${{ steps.get-version-info.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Create Github Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: v${{ needs.get-version-info.outputs.SimpleVersion }}
        tag_name: v${{ needs.get-version-info.outputs.SimpleVersion }}
        body: ${{ steps.get-version-info.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload MSBUILD preview release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_preview_release.outputs.upload_url }}
        asset_path: Parithon.StreamDeck.SDK.MSBuild.${{ needs.get-version-info.outputs.CloudBuildVersion }}.nupkg
        asset_name: Parithon.StreamDeck.SDK.MSBuild.${{ needs.get-version-info.outputs.CloudBuildVersion }}.nupkg
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload SDK preview release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_preview_release.outputs.upload_url }}
        asset_path: .StreamDeck.SDK.${{ needs.get-version-info.outputs.CloudBuildVersion }}.nupkg
        asset_name: .StreamDeck.SDK.${{ needs.get-version-info.outputs.CloudBuildVersion }}.nupkg
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload MSBUILD release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: Parithon.StreamDeck.SDK.MSBuild.${{ needs.get-version-info.outputs.SimpleVersion }}.nupkg
        asset_name: Parithon.StreamDeck.SDK.MSBuild.${{ needs.get-version-info.outputs.SimpleVersion }}.nupkg
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload SDK release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: .StreamDeck.SDK.${{ needs.get-version-info.outputs.SimpleVersion }}.nupkg
        asset_name: .StreamDeck.SDK.${{ needs.get-version-info.outputs.SimpleVersion }}.nupkg
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ github.token }}

  publish:
    name: Publish Nuget Packages
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: nupkgs-main

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: nupkgs-v${{ needs.get-version-info.outputs.SimpleVersion }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    
    - name: Publish NuGet Packages
      run: dotnet nuget push *.nupkg --api-key $NUGETKEY --source https://api.nuget.org/v3/index.json
      env:
        NUGETKEY: ${{ secrets.NUGETKEY }}

  cleanup:
    name: Cleanup Action
    needs: [ create-releases, publish ]
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
    - name: Delete Artifact from Action
      uses: parithon/delete-artifact@v1.0.0
      with:
        name: nupkgs
        failOnError: false
